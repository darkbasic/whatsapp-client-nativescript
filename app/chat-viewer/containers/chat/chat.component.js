"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var combineLatest_1 = require("rxjs/observable/combineLatest");
var chats_service_1 = require("~/services/chats.service");
var common_1 = require("@angular/common");
var ChatComponent = /** @class */ (function () {
    function ChatComponent(route, router, location, chatsService) {
        this.route = route;
        this.router = router;
        this.location = location;
        this.chatsService = chatsService;
        this.selectionConfirmed = new core_1.EventEmitter();
    }
    ChatComponent.prototype.ngOnInit = function () {
        var _this = this;
        combineLatest_1.combineLatest(this.route.params, this.route.queryParams, function (params, queryParams) { return ({ params: params, queryParams: queryParams }); })
            .subscribe(function (_a) {
            var chatId = _a.params.id, oui = _a.queryParams.oui;
            _this.chatId = chatId;
            _this.optimisticUI = oui;
            if (_this.optimisticUI) {
                // We are using fake IDs generated by the Optimistic UI
                _this.chatsService.addChat$.subscribe(function (_a) {
                    var _b = _a.data, addChat = _b.addChat, addGroup = _b.addGroup;
                    _this.chatId = addChat ? addChat.id : addGroup.id;
                    console.log("Switching from the Optimistic UI id " + chatId + " to " + _this.chatId);
                    // Rewrite the URL
                    _this.location.go("chat/" + _this.chatId);
                    // Optimistic UI no more
                    _this.optimisticUI = false;
                });
            }
            _this.chatsService.getChat(chatId, _this.optimisticUI).chat$.subscribe(function (chat) {
                _this.messages = chat.messages;
                _this.name = chat.name;
                _this.isGroup = chat.isGroup;
            });
        });
    };
    ChatComponent.prototype.goToChats = function () {
        this.router.navigate(['/chats']);
    };
    ChatComponent.prototype.addMessage = function (content) {
        console.log('addMessage');
        this.chatsService.addMessage(this.chatId, content).subscribe();
    };
    ChatComponent.prototype.deleteMessages = function (messageIds) {
        //this.chatsService.removeMessages(this.chatId, this.messages, messageIds).subscribe();
    };
    ChatComponent = tslib_1.__decorate([
        core_1.Component({
            moduleId: module.id,
            template: "\n    <!--<app-toolbar>\n      <button class=\"navigation\" mat-button (click)=\"goToChats()\">\n        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n      </button>\n      <div class=\"title\">{{ name }}</div>\n    </app-toolbar>\n    <div class=\"container\">\n      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n                         appSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n        <app-confirm-selection #confirmSelection></app-confirm-selection>\n      </app-messages-list>\n      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n    </div>-->\n\n    <StackLayout>\n      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n                         appSelectableList=\"multiple_press\" [selectionConfirmed]=\"selectionConfirmed\"\n                         (multiple)=\"deleteMessages($event)\">\n          <app-confirm-selection #confirmSelection (emitClick)=\"selectionConfirmed.emit(null)\"></app-confirm-selection>\n      </app-messages-list>\n    \n      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n    </StackLayout>\n  ",
            styleUrls: ['./chat.component.css'],
        }),
        tslib_1.__metadata("design:paramtypes", [router_1.ActivatedRoute,
            router_1.Router,
            common_1.Location,
            chats_service_1.ChatsService])
    ], ChatComponent);
    return ChatComponent;
}());
exports.ChatComponent = ChatComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGF0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBZ0U7QUFDaEUsMENBQXlEO0FBQ3pELCtEQUE4RDtBQUM5RCwwREFBd0Q7QUFFeEQsMENBQTJDO0FBK0IzQztJQVFFLHVCQUFvQixLQUFxQixFQUNyQixNQUFjLEVBQ2QsUUFBa0IsRUFDbEIsWUFBMEI7UUFIMUIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFMOUMsdUJBQWtCLEdBQUcsSUFBSSxtQkFBWSxFQUFRLENBQUM7SUFNOUMsQ0FBQztJQUVELGdDQUFRLEdBQVI7UUFBQSxpQkEwQkM7UUF6QkMsNkJBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFDckQsVUFBQyxNQUFzQixFQUFFLFdBQThCLElBQUssT0FBQSxDQUFDLEVBQUMsTUFBTSxRQUFBLEVBQUUsV0FBVyxhQUFBLEVBQUMsQ0FBQyxFQUF2QixDQUF1QixDQUFDO2FBQ25GLFNBQVMsQ0FBQyxVQUFDLEVBQTBDO2dCQUFoQyxxQkFBVSxFQUFpQix3QkFBRztZQUNsRCxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUVyQixLQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztZQUV4QixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDdEIsdURBQXVEO2dCQUN2RCxLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBQyxFQUEyQjt3QkFBMUIsWUFBeUIsRUFBbEIsb0JBQU8sRUFBRSxzQkFBUTtvQkFDN0QsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7b0JBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMseUNBQXVDLE1BQU0sWUFBTyxLQUFJLENBQUMsTUFBUSxDQUFDLENBQUM7b0JBQy9FLGtCQUFrQjtvQkFDbEIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBUSxLQUFJLENBQUMsTUFBUSxDQUFDLENBQUM7b0JBQ3hDLHdCQUF3QjtvQkFDeEIsS0FBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztZQUVELEtBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFBLElBQUk7Z0JBQ3ZFLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDOUIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUN0QixLQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxpQ0FBUyxHQUFUO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxrQ0FBVSxHQUFWLFVBQVcsT0FBZTtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakUsQ0FBQztJQUVELHNDQUFjLEdBQWQsVUFBZSxVQUFvQjtRQUNqQyx1RkFBdUY7SUFDekYsQ0FBQztJQXJEVSxhQUFhO1FBN0J6QixnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSx3cUNBd0JUO1lBQ0QsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7U0FDcEMsQ0FBQztpREFTMkIsdUJBQWM7WUFDYixlQUFNO1lBQ0osaUJBQVE7WUFDSiw0QkFBWTtPQVhuQyxhQUFhLENBc0R6QjtJQUFELG9CQUFDO0NBQUEsQUF0REQsSUFzREM7QUF0RFksc0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzL29ic2VydmFibGUvY29tYmluZUxhdGVzdCc7XG5pbXBvcnQgeyBDaGF0c1NlcnZpY2UgfSBmcm9tIFwifi9zZXJ2aWNlcy9jaGF0cy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBHZXRDaGF0IH0gZnJvbSBcIn4vdHlwZXNcIjtcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gIHRlbXBsYXRlOiBgXG4gICAgPCEtLTxhcHAtdG9vbGJhcj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJuYXZpZ2F0aW9uXCIgbWF0LWJ1dHRvbiAoY2xpY2spPVwiZ29Ub0NoYXRzKClcIj5cbiAgICAgICAgPG1hdC1pY29uIGFyaWEtbGFiZWw9XCJJY29uLWJ1dHRvbiB3aXRoIGFuIGFycm93IGJhY2sgaWNvblwiPmFycm93X2JhY2s8L21hdC1pY29uPlxuICAgICAgPC9idXR0b24+XG4gICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj57eyBuYW1lIH19PC9kaXY+XG4gICAgPC9hcHAtdG9vbGJhcj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICA8YXBwLW1lc3NhZ2VzLWxpc3QgW2l0ZW1zXT1cIm1lc3NhZ2VzXCIgW2lzR3JvdXBdPVwiaXNHcm91cFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgYXBwU2VsZWN0YWJsZUxpc3Q9XCJtdWx0aXBsZV9wcmVzc1wiIChtdWx0aXBsZSk9XCJkZWxldGVNZXNzYWdlcygkZXZlbnQpXCI+XG4gICAgICAgIDxhcHAtY29uZmlybS1zZWxlY3Rpb24gI2NvbmZpcm1TZWxlY3Rpb24+PC9hcHAtY29uZmlybS1zZWxlY3Rpb24+XG4gICAgICA8L2FwcC1tZXNzYWdlcy1saXN0PlxuICAgICAgPGFwcC1uZXctbWVzc2FnZSAobmV3TWVzc2FnZSk9XCJhZGRNZXNzYWdlKCRldmVudClcIj48L2FwcC1uZXctbWVzc2FnZT5cbiAgICA8L2Rpdj4tLT5cblxuICAgIDxTdGFja0xheW91dD5cbiAgICAgIDxhcHAtbWVzc2FnZXMtbGlzdCBbaXRlbXNdPVwibWVzc2FnZXNcIiBbaXNHcm91cF09XCJpc0dyb3VwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICBhcHBTZWxlY3RhYmxlTGlzdD1cIm11bHRpcGxlX3ByZXNzXCIgW3NlbGVjdGlvbkNvbmZpcm1lZF09XCJzZWxlY3Rpb25Db25maXJtZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgIChtdWx0aXBsZSk9XCJkZWxldGVNZXNzYWdlcygkZXZlbnQpXCI+XG4gICAgICAgICAgPGFwcC1jb25maXJtLXNlbGVjdGlvbiAjY29uZmlybVNlbGVjdGlvbiAoZW1pdENsaWNrKT1cInNlbGVjdGlvbkNvbmZpcm1lZC5lbWl0KG51bGwpXCI+PC9hcHAtY29uZmlybS1zZWxlY3Rpb24+XG4gICAgICA8L2FwcC1tZXNzYWdlcy1saXN0PlxuICAgIFxuICAgICAgPGFwcC1uZXctbWVzc2FnZSAobmV3TWVzc2FnZSk9XCJhZGRNZXNzYWdlKCRldmVudClcIj48L2FwcC1uZXctbWVzc2FnZT5cbiAgICA8L1N0YWNrTGF5b3V0PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9jaGF0LmNvbXBvbmVudC5jc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2hhdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNoYXRJZDogc3RyaW5nO1xuICBtZXNzYWdlczogR2V0Q2hhdC5NZXNzYWdlc1tdO1xuICBuYW1lOiBzdHJpbmc7XG4gIGlzR3JvdXA6IGJvb2xlYW47XG4gIG9wdGltaXN0aWNVSTogYm9vbGVhbjtcbiAgc2VsZWN0aW9uQ29uZmlybWVkID0gbmV3IEV2ZW50RW1pdHRlcjxudWxsPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgICBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBjaGF0c1NlcnZpY2U6IENoYXRzU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29tYmluZUxhdGVzdCh0aGlzLnJvdXRlLnBhcmFtcywgdGhpcy5yb3V0ZS5xdWVyeVBhcmFtcyxcbiAgICAgIChwYXJhbXM6IHsgaWQ6IHN0cmluZyB9LCBxdWVyeVBhcmFtczogeyBvdWk/OiBib29sZWFuIH0pID0+ICh7cGFyYW1zLCBxdWVyeVBhcmFtc30pKVxuICAgICAgLnN1YnNjcmliZSgoe3BhcmFtczoge2lkOiBjaGF0SWR9LCBxdWVyeVBhcmFtczoge291aX19KSA9PiB7XG4gICAgICAgIHRoaXMuY2hhdElkID0gY2hhdElkO1xuXG4gICAgICAgIHRoaXMub3B0aW1pc3RpY1VJID0gb3VpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGltaXN0aWNVSSkge1xuICAgICAgICAgIC8vIFdlIGFyZSB1c2luZyBmYWtlIElEcyBnZW5lcmF0ZWQgYnkgdGhlIE9wdGltaXN0aWMgVUlcbiAgICAgICAgICB0aGlzLmNoYXRzU2VydmljZS5hZGRDaGF0JC5zdWJzY3JpYmUoKHtkYXRhOiB7YWRkQ2hhdCwgYWRkR3JvdXB9fSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGF0SWQgPSBhZGRDaGF0ID8gYWRkQ2hhdC5pZCA6IGFkZEdyb3VwLmlkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFN3aXRjaGluZyBmcm9tIHRoZSBPcHRpbWlzdGljIFVJIGlkICR7Y2hhdElkfSB0byAke3RoaXMuY2hhdElkfWApO1xuICAgICAgICAgICAgLy8gUmV3cml0ZSB0aGUgVVJMXG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uLmdvKGBjaGF0LyR7dGhpcy5jaGF0SWR9YCk7XG4gICAgICAgICAgICAvLyBPcHRpbWlzdGljIFVJIG5vIG1vcmVcbiAgICAgICAgICAgIHRoaXMub3B0aW1pc3RpY1VJID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoYXRzU2VydmljZS5nZXRDaGF0KGNoYXRJZCwgdGhpcy5vcHRpbWlzdGljVUkpLmNoYXQkLnN1YnNjcmliZShjaGF0ID0+IHtcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0gY2hhdC5tZXNzYWdlcztcbiAgICAgICAgICB0aGlzLm5hbWUgPSBjaGF0Lm5hbWU7XG4gICAgICAgICAgdGhpcy5pc0dyb3VwID0gY2hhdC5pc0dyb3VwO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ29Ub0NoYXRzKCkge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2NoYXRzJ10pO1xuICB9XG5cbiAgYWRkTWVzc2FnZShjb250ZW50OiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZygnYWRkTWVzc2FnZScpO1xuICAgIHRoaXMuY2hhdHNTZXJ2aWNlLmFkZE1lc3NhZ2UodGhpcy5jaGF0SWQsIGNvbnRlbnQpLnN1YnNjcmliZSgpO1xuICB9XG5cbiAgZGVsZXRlTWVzc2FnZXMobWVzc2FnZUlkczogc3RyaW5nW10pIHtcbiAgICAvL3RoaXMuY2hhdHNTZXJ2aWNlLnJlbW92ZU1lc3NhZ2VzKHRoaXMuY2hhdElkLCB0aGlzLm1lc3NhZ2VzLCBtZXNzYWdlSWRzKS5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19